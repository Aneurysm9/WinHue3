<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:resx="clr-namespace:WinHue3.Resources"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:converters="clr-namespace:WinHue3.Converters"
        xmlns:controls="clr-namespace:WinHue3.Controls"
        xmlns:th="clr-namespace:WinHue3.Utils"
        xmlns:models="clr-namespace:WinHue3.Models"
        xmlns:mainFormViewModels="clr-namespace:WinHue3.ViewModels.MainFormViewModels"
        x:Class="WinHue3.MainWindow"
    Title="WinHue 3" Height="824.356" Width="1349.484" WindowStartupLocation="CenterScreen" MinHeight="600" MinWidth="800" Icon="/WinHue3;component/Resources/HueGroupOn-Large.png" Closing="Window_Closing"  ResizeMode="CanResizeWithGrip" Name="MainForm">
    <Window.DataContext>
        <mainFormViewModels:MainFormViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <converters:DoubleToDecimalConverter x:Key="DoubleToDecimalConverter"/>
        <converters:DoubleToUShortConverter x:Key="SliderToUshortConverter"/>
        <Style TargetType="{x:Type TextBlock}" x:Key="tbWrap">
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="Width" Value="auto"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=MainForm, Path=DataContext.MainFormModel.WrapText}" Value="True" >
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="Width" Value="75"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBox}" x:Key="tbxWrap">
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="Width" Value="auto"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Background" Value="Transparent"></Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=MainForm, Path=DataContext.MainFormModel.WrapText}" Value="True">
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="Width" Value="75"/>
                </DataTrigger>
            </Style.Triggers>

        </Style>
    </Window.Resources>

    <i:Interaction.Triggers>
        <i:EventTrigger EventName="ContentRendered">
            <i:InvokeCommandAction Command="{Binding InitializeCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>


    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="137" />
            <RowDefinition Height="573*"/>
            <RowDefinition Height="28"/>
        </Grid.RowDefinitions>
        <Ribbon x:Name="rbnMainRibbon" VerticalAlignment="Top" DockPanel.Dock="Top" Grid.Row="0" Height="137">
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu SmallImageSource="/WinHue3;component/icon.ico">
                    <RibbonApplicationMenuItem x:Name="mnuAppSettings" Header="{x:Static resx:GUI.MainForm_Menu_Settings}" ImageSource="/WinHue3;component/Resources/settings.png" Command="{Binding OpenSettingsWindowCommand}" />
                    <RibbonApplicationMenuItem x:Name="mnuAppBridgePairing" Header="{x:Static resx:GUI.MainForm_Menu_BridgePairing}" ImageSource="/WinHue3;component/Resources/bridgeAdd.png" Command="{Binding DoBridgePairingCommand}" />
                    <RibbonApplicationMenuItem x:Name="mnuLoadVirtualBridge" Header="{x:Static resx:GUI.MainForm_Menu_VirtualBridge}" ImageSource="/WinHue3;component/Resources/load.png" Command="{Binding LoadVirtualBridgeCommand}" Visibility="{Binding IsMasterDebugger, Converter={StaticResource BoolToVisibilityConverter}}"/>
                    <RibbonSeparator/>
                    <RibbonApplicationMenuItem Header="{x:Static resx:GUI.MainForm_Menu_Quit}" ImageSource="/WinHue3;component/Resources/door_open.png" Command="{Binding QuitApplicationCommand}"/>
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>
            <Ribbon.QuickAccessToolBar>
                <RibbonQuickAccessToolBar/>
            </Ribbon.QuickAccessToolBar>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_Home}" HorizontalAlignment="Stretch" VerticalAlignment="Center" >
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Search}" LargeImageSource="/WinHue3;component/Resources/UpdateSearch.png">
                    <RibbonSplitButton x:Name="btnSearchLights" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchLight}" LargeImageSource="/WinHue3;component/Resources/HueLightSearch.png" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchLight}" Command="{Binding SearchNewLightsCommand}" Height="64">
                        <RibbonButton Label="Touchlink" Command="{Binding TouchLinkCommand}" HorizontalAlignment="Left"/>
                        <RibbonButton Label="Find Lights by serial" Command="{Binding FindLightSerialCommand}" HorizontalAlignment="Left"/>
                    </RibbonSplitButton>
                    <RibbonButton x:Name="btnSearchSensors" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchSensor}" LargeImageSource="/WinHue3;component/Resources/SensorSearch.png" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchSensor}" Command="{Binding SearchNewSensorsCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Commands}">
                    <RibbonButton x:Name="btnAllOn" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllON}"   VerticalAlignment="Center" LargeImageSource="/WinHue3;component/Resources/HueGroupOn-Large.png" Command="{Binding AllOnCommand}"/>
                    <RibbonButton x:Name="btnAllOff" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllOFF}"  VerticalAlignment="Center" LargeImageSource="/WinHue3;component/Resources/HueGroupOff-Large.png" Command="{Binding AllOffCommand}" IsManipulationEnabled="True"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Refresh}" >
                    <RibbonButton x:Name="btnRefresh" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_RefreshButton}"  LargeImageSource="/WinHue3;component/Resources/Reload.png" Command="{Binding RefreshViewCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators}">
                    <RibbonButton x:Name="btnCreateGroup" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateGroup}" LargeImageSource="/WinHue3;component/Resources/HueGroupOn-Large.png"  Command="{Binding CreateGroupCommand}"/>
                    <RibbonButton x:Name="btnScene" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateScene}"  LargeImageSource="/WinHue3;component/Resources/scenes.png"  Command="{Binding CreateSceneCommand}"/>
                    <RibbonButton x:Name="btnCreateSchedule" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSchedule}" LargeImageSource="/WinHue3;component/Resources/SchedulesLarge.png"  Command="{Binding CreateScheduleCommand}"/>
                    <RibbonButton x:Name="btnCreateRule" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateRule}" LargeImageSource="/WinHue3;component/Resources/rules.png"  Command="{Binding CreateRuleCommand}"/>
                    <RibbonButton x:Name="btnCreateSensor" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSensor}" LargeImageSource="/WinHue3;component/Resources/sensor.png"  Command="{Binding CreateSensorCommand}"/>
                    <!--<RibbonButton x:Name="btnCreateAnimation" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateAnimation}" IsEnabled="{Binding EnableControls, FallbackValue=false}" Command="{Binding CreateAnimationCommand}" LargeImageSource="Resources/animation.png"/>-->
                    <RibbonButton x:Name="btnCreateHotkey" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateHotkey}" Command="{Binding CreateHotKeyCommand}" LargeImageSource="/WinHue3;component/Resources/hotkeys.png"/>
                    <RibbonButton x:Name="btnCreateResourceLink" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_ResourceLink}"  Command="{Binding CreateResourceLinkCommand}" LargeImageSource="/WinHue3;component/Resources/resource.png"/>
                    <RibbonButton x:Name="btnCreateAdvanced" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_AdvancedCreator}"  Command="{Binding CreateAdvancedCommand}" LargeImageSource="/WinHue3;component/Resources/advanced.png"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Settings}">
                    <RibbonButton x:Name="btnBridgeSettings" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsButton}" LargeImageSource="/WinHue3;component/Resources/settings.png" Command="{Binding ChangeBridgeSettingsCommand}"/>
                    <RibbonSplitButton x:Name="btnUpdate" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton_CheckForUpdate}" LargeImageSource="/WinHue3;component/Resources/UpdateSearch.png" Command="{Binding CheckForUpdateCommand}" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton}" SmallImageSource="/WinHue3;component/Resources/update.png" Command="{Binding UpdateBridgeCommand}"/> 
                    </RibbonSplitButton>
                    <RibbonButton x:Name="btnUser" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUsers}" LargeImageSource="/WinHue3;component/Resources/user.png" Command="{Binding ManageUsersCommand}" />
                    <RibbonButton x:Name="btnResetTT" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsResetTT}" LargeImageSource="/WinHue3;component/Resources/resettt.png" Command="{Binding ResetTransitionTimeCommand}"/>
                </RibbonGroup>
                <RibbonGroup Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Events}">
                    <RibbonButton x:Name="btnEventLog" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_EventsLogButton}" LargeImageSource="/WinHue3;component/Resources/eventlog.png"  Command="{Binding ShowEventLogCommand}" KeyTip="E"/>
                </RibbonGroup>

            </RibbonTab>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_Tools}">
                <RibbonGroup Header="Tools" Width="auto">
                    <RibbonSplitButton x:Name="btnCpuTempMon" Label="{x:Static resx:GUI.MainForm_ToolsTab_CpuTempMon}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Command="{Binding CpuTempMonCommand}"  LargeImageSource="/WinHue3;component/Resources/cputemp.png" ToolTipTitle="{x:Static resx:GUI.MainForm_ToolsTab_CpuTempMon_Tooltip}" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding CpuTempMonSettingsCommand}"/>
                    </RibbonSplitButton>
                    <!--<RibbonSplitButton x:Name="btnRssFeedMon" Label="{x:Static resx:GUI.MainForm_ToolsTab_RssFeed}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"  Command="{Binding RssFeedMonCommand}" LargeImageSource="Resources/rss.png" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding RssFeedMonSettingsCommand}"/>
                    </RibbonSplitButton>-->
                    <!--<RibbonSplitButton x:Name="btnClapperMon" Label="{x:Static resx:GUI.MainForm_ToolsTab_Clapper}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Command="{Binding ClapperCommand}"  LargeImageSource="Resources/rss.png" IsEnabled="False" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding RssFeedMonSettingsCommand}"/>
                    </RibbonSplitButton>-->
                </RibbonGroup>
                <RibbonGroup x:Name="rgViews" Header="Views" Width="auto">
                    <RibbonButton x:Name="btnScenesMapping" Label="{x:Static resx:GUI.MainForm_Tab_View_SceneMapping}" Command="{Binding ViewSceneMappingCommand}" LargeImageSource="/WinHue3;component/Resources/SceneMapping.png"/>
                    <RibbonButton x:Name="btnBulbView" Label="{x:Static resx:GUI.MainForm_Tab_View_BulbsView}" Command="{Binding ViewBulbsCommand}" LargeImageSource="/WinHue3;component/Resources/BulbView.png" />
                    <RibbonButton x:Name="btnGroupView" Label="{x:Static resx:GUI.MainForm_Tab_View_GroupsView}" Command="{Binding ViewGroupsCommand}" LargeImageSource="/WinHue3;component/Resources/GroupView.png"/>
                </RibbonGroup>
            </RibbonTab>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_View}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <RibbonGroup x:Name="rgViewSort" Width="auto" Header="{x:Static resx:GUI.MainForm_Tab_View_Sorting}">
                    <WrapPanel HorizontalAlignment="Left" VerticalAlignment="Center">
                        <Label Content="Sorting"/>
                        <controls:CommandComboBox x:Name="rbcSorting" Width="100" HorizontalAlignment="Left" HorizontalContentAlignment="Left" SelectedValue="{Binding MainFormModel.Sort}" SelectedValuePath="Tag"  Command="{Binding SortListViewCommand}">
                            <ComboBoxItem Content="Defaut" Tag="{x:Static models:WinHueSortOrder.Default}"/>
                            <ComboBoxItem Content="Ascending" Tag="{x:Static models:WinHueSortOrder.Ascending}"/>
                            <ComboBoxItem Content="Descending" Tag="{x:Static models:WinHueSortOrder.Descending}"/>
                        </controls:CommandComboBox>
                    </WrapPanel>
                </RibbonGroup>
            </RibbonTab>
            <RibbonTab Header="{x:Static resx:GUI.MainForm_Tab_Help}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <RibbonGroup>
                    <RibbonButton Label="{x:Static resx:GUI.MainForm_Tab_Help_Website}" x:Name="btnWebsite" LargeImageSource="/WinHue3;component/Resources/WebSite.png" Command="{Binding OpenWinHueWebsiteCommand}" />
                    <RibbonButton Label="{x:Static resx:GUI.MainForm_Tab_Help_Forum}" x:Name="btnSupportForum" LargeImageSource="/WinHue3;component/Resources/Help.png" Command="{Binding OpenWinHueSupportCommand}"/>
                    <RibbonButton Label="{x:Static resx:GUI.MainForm_Tab_Help_About}" x:Name="btnAbout" LargeImageSource="/WinHue3;component/Resources/unknown.png" Command="{Binding OpenAboutWindowCommand}" />
                </RibbonGroup>
            </RibbonTab>
        </Ribbon>
        <StatusBar x:Name="sbStatusBar" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="2">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="350"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="0" Padding="2" >
                <ComboBox  x:Name="cbListBridge" ItemsSource="{Binding ListBridges}" DisplayMemberPath="LongName" SelectedItem="{Binding SelectedBridge}" Visibility="{Binding MultiBridgeCB}" Width="200" Height="24">
                    <ComboBox.Style>
                        <Style TargetType="ComboBox">
                            <Setter Property="Visibility" Value="Visible"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding MultiBridgeCB}" Value="False">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.Style>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding ChangeBridgeCommand}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ComboBox>
            </StatusBarItem>
            <StatusBarItem Grid.Column="1" HorizontalContentAlignment="Stretch" BorderThickness="1" Margin="2" BorderBrush="#FFBFBFBF" >
                <TextBlock  x:Name="lblSBMessage" Text="{Binding Lastmessage}" HorizontalAlignment="Stretch"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="2" BorderThickness="1" Margin="2" BorderBrush="#FFBFBFBF">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="18"/>
                        <ColumnDefinition Width="3"/>
                        <ColumnDefinition Width="18"/>
                        <ColumnDefinition Width="3"/>
                        <ColumnDefinition Width="18"/>
                    </Grid.ColumnDefinitions>
                    <Border Width="16" Height="16" Grid.Column="0" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_HotKey}" CornerRadius="8">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Setter Property="Background" Value="Red"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HotkeyDetected}" Value="True">
                                        <Setter Property="Background" Value="Green"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>

                    <Image Width="16" Height="16" Grid.Column="2" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_Search}">
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Setter Property="Source" Value="{x:Null}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SearchingLights}" Value="True">
                                        <Setter Property="Source" Value="/WinHue3;component/Resources/magnifier.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image >

                    <Image Width="16" Height="16" Grid.Column="4" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_UpdateAvailable}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseUp">
                                <i:InvokeCommandAction Command="{Binding DoAppUpdateCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Setter Property="Source" Value="{x:Null}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding AppUpdateAvailable}" Value="True">
                                        <Setter Property="Source" Value="/WinHue3;component/Resources/UpdateSearch.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                </Grid>
            </StatusBarItem>
        </StatusBar>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="350"/>
            </Grid.ColumnDefinitions>
            
            <ListView x:Name="lvMainObjects" HorizontalAlignment="Stretch" ItemsSource="{Binding ListBridgeObjects, NotifyOnSourceUpdated=True}"  ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectedItem="{Binding SelectedObject}" ContextMenuOpening="lvMainObjects_ContextMenuOpening" SelectionChanged="lvMainObjects_SelectionChanged" SelectionMode="Single" VerticalContentAlignment="Stretch" Grid.Column="0" IsEnabled="{Binding EnableListView}">
                <ListView.Resources>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="Control.MouseDoubleClick">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(SolidColorBrush.Color)" To="Red" Duration="0:0:.3" AutoReverse="True"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:.3" AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </ListView.Resources>
                <ListView.InputBindings>
                    <KeyBinding Key="Delete" Command="{Binding DeleteObjectCommand}"/>
                </ListView.InputBindings>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseDoubleClick">
                        <i:InvokeCommandAction Command="{Binding DoubleClickObjectCommand}"/>
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseUp">
                        <i:InvokeCommandAction Command="{Binding ClickObjectCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <ListView.ContextMenu>
                    <ContextMenu x:Name="cmListView" IsTabStop="True">
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Edit}" x:Name="mnuEdit" Command="{Binding EditObjectCommand}"/>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Identify}" x:Name="mnuIdentify">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_None}" x:Name="mnuIdentifyStop" Command="{Binding IdentifyStopCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Long}" x:Name="mnuIdentifyLong" Command="{Binding IdentifyLongCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Short}" x:Name="mnuIdentifyShort" Command="{Binding IdentifyShortCommand}"/>
                        </MenuItem>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Effects}">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Colorloop}" x:Name="mnuColorloop" Command="{Binding ColorloopCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_None}" x:Name="mnuEffectNone" Command="{Binding NoEffectCommand}"/>
                        </MenuItem>
                        <!--<MenuItem Header="Strobe" Command="{Binding StrobeCommand}"/>-->
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity}" x:Name="mnuSensitivity">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_High}" x:Name="mnuSensivityHigh" Command="{Binding SensitivityHighCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_Medium}" x:Name="mnuSensivityMed" Command="{Binding SensitivityMediumCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_Low}" x:Name="mnuSensivityLow" Command="{Binding SensitivityLowCommand}"/>
                        </MenuItem>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Clone}" x:Name="mnuCloning">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_QuickClone}" x:Name="mnuQuickClone" Command="{Binding QuickCloneCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Clone}" x:Name="mnuClone" Command="{Binding CloneCommand}"/>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Copy}">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJsonRaw}" x:Name="mnuCopyToJsonRaw" Command="{Binding CopyToJsonRawCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJson}" x:Name="mnuCopyToJson" Command="{Binding CopyToJsonCommand}"/>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ReplaceLightsState}" x:Name="mnuReplaceState" Command="{Binding ReplaceCurrentStateCommand}" />
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Rename}" x:Name="mnuRenameObject" Command="{Binding RenameObjectCommand}"/>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Delete}" x:Name="mnuDeleteObject" Command="{Binding DeleteObjectCommand}"/>
                    </ContextMenu>
                </ListView.ContextMenu>
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="5,5,5,5"/>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <WrapPanel Orientation="Vertical" Margin="5,5,5,5" ItemHeight="Auto" ItemWidth="Auto" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                            <Image Height="64" Width="64" Source="{Binding Image}" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" RenderOptions.BitmapScalingMode="HighQuality"/>
                            <TextBox Text="{Binding name}" Style="{StaticResource tbxWrap}" HorizontalAlignment="Center" TextAlignment="Center" FontWeight="Bold" IsReadOnly="True"/>
                            <!--<TextBlock x:Name="tblName" Text="{Binding name}" Style="{StaticResource tbWrap}" HorizontalAlignment="Center" TextAlignment="Center" FontWeight="Bold"/>-->
                            <TextBlock x:Name="tblShowId" Text="{Binding Id}" Style="{StaticResource tbWrap}" Visibility="{Binding Path=DataContext.MainFormModel.ShowId, Converter={StaticResource BoolToVisibilityConverter}, ElementName=MainForm}" TextAlignment="Center" FontStyle="Italic" >
                            </TextBlock>
                        </WrapPanel>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <ListView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Expander IsExpanded="True" >
                                                <Expander.Header>
                                                    <Grid Width="Auto" HorizontalAlignment="{Binding HorizontalAlignment, Mode=OneWayToSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}}" >
                                                        <Grid.Background>
                                                            <LinearGradientBrush>
                                                                <GradientStop Color="White" />
                                                                <GradientStop Color="Gray" Offset="1"/>
                                                            </LinearGradientBrush>
                                                        </Grid.Background>
                                                        <TextBlock FontWeight="Bold" FontSize="14" Text="{Binding Name}" FontStyle="Italic"/>
                                                    </Grid>
                                                </Expander.Header>
                                                <ItemsPresenter />
                                            </Expander>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </ListView.GroupStyle>
            </ListView>
            <TextBlock Text="{x:Static resx:GUI.BridgeUpdateRequired}" Visibility="{Binding EnableListView, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter='reverse', FallbackValue=false}" FontSize="40" Margin="5,181,9.667,0"  Height="198" VerticalAlignment="Top" TextWrapping="Wrap" HorizontalAlignment="Center" Foreground="#FF7D7D7D"/>
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" MinHeight="403"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Column="0" HorizontalAlignment="Stretch" Background="AliceBlue" Height="403" VerticalAlignment="Top">
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_HueColor}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding ElementName=slHue, Path=IsEnabled}"/>
                    <controls:BindableHueSlider x:Name="slHue" Height="22" VerticalAlignment="Top" Margin="10,0,10,10" Width="Auto" Value="{Binding MainFormModel.SliderHue}" IsSnapToTickEnabled="True" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slHue}" IsMoveToPointEnabled="True" Command="{Binding SliderHueChangedCommand}" Minimum="-1" Maximum="65535" OldValue="{Binding MainFormModel.OldSliderHue, Mode=OneWayToSource}">
                        <controls:BindableHueSlider.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1.0,0.5" >
                                <GradientStop Color="#FFFF0000" />
                                <GradientStop Color="#FEFFFF00" Offset="0.167" />
                                <GradientStop Color="#FE00FF00" Offset="0.333" />
                                <GradientStop Color="#FE00FFFF" Offset="0.5"   />
                                <GradientStop Color="#FE0000FF" Offset="0.667" />
                                <GradientStop Color="#FEFF00FF" Offset="0.833" />
                                <GradientStop Color="#FFFF0000" Offset="1.0"   />
                            </LinearGradientBrush>
                        </controls:BindableHueSlider.Background>
                    </controls:BindableHueSlider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_Brightness}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding ElementName=slBri, Path=IsEnabled}"/>
                    <controls:BindableSlider x:Name="slBri" Height="22" VerticalAlignment="Top" Maximum="255" Minimum="0" Margin="10,0,10,10" Width="Auto" IsSnapToTickEnabled="True" Value="{Binding MainFormModel.SliderBri}"  SmallChange="1" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slBri}" IsMoveToPointEnabled="True" Command="{Binding SliderBriChangedCommand}" OldValue="{Binding MainFormModel.OldSliderBri,Mode=OneWayToSource}">
                        <controls:BindableSlider.Background>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                <GradientStop Color="White" Offset="1"/>
                                <GradientStop Color="Black" Offset="0"/>
                            </LinearGradientBrush>
                        </controls:BindableSlider.Background>
                    </controls:BindableSlider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_Saturation}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding ElementName=slSAT, Path=IsEnabled}"/>
                    <controls:BindableSlider x:Name="slSAT" Height="22" VerticalAlignment="Top" Maximum="255" Minimum="0" Margin="10,0,10,10" IsSnapToTickEnabled="True" SmallChange="1" Value="{Binding MainFormModel.SliderSat}"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slSAT}" IsMoveToPointEnabled="True" Command="{Binding SliderSatChangedCommand}" OldValue="{Binding MainFormModel.OldSliderSat, Mode=OneWayToSource}">
                        <controls:BindableSlider.Background>
                            <LinearGradientBrush>
                                <GradientStop Color="White" x:Name="slSATStartGradient"/>
                                <GradientStop Color="{Binding Hue, ElementName=slHue}" Offset="1" x:Name="slSATEndGradient"/>
                            </LinearGradientBrush>
                        </controls:BindableSlider.Background>
                    </controls:BindableSlider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_ColorTemp}" HorizontalAlignment="Center"  Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding ElementName=slCT, Path=IsEnabled}"/>
                    <controls:BindableSlider x:Name="slCT" Height="22" VerticalAlignment="Top" Maximum="500" Margin="10,0,10,10" Width="Auto" Minimum="153" IsSnapToTickEnabled="True" Value="{Binding MainFormModel.SliderCt}"  SmallChange="1"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=slCT}" IsMoveToPointEnabled="True" Command="{Binding SliderCtChangedCommand}" OldValue="{Binding MainFormModel.OldSliderCt, Mode=OneWayToSource}">
                        <controls:BindableSlider.Background>
                            <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                                <GradientStop Color="#FFFF8912" Offset="0"/>
                                <GradientStop Color="#FFFFF9FD" Offset="1"/>
                            </LinearGradientBrush>
                        </controls:BindableSlider.Background>
                    </controls:BindableSlider>
                    <Grid Height="100">
                        <Separator Margin="0,-1,0,93"/>
                        <Separator Margin="0,104,0,-12"/>
                        <Label x:Name="lblTT" Content="{Binding TransitionTimeTooltip, Mode=OneWay}" HorizontalAlignment="Center" Margin="0,112,0,-38" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding ElementName=slTT, Path=IsEnabled}"/>
                        <controls:BindableSlider x:Name="slTT" Maximum="65535" Minimum="-1" Margin="9,143,11,-65" IsSnapToTickEnabled="True" SmallChange="1" SnapsToDevicePixels="True" Value="{Binding SliderTt, Converter={StaticResource SliderToUshortConverter}, FallbackValue=-1}" IsMoveToPointEnabled="True" IsEnabled="{Binding IsEnabled, ElementName=slHue}" />
                        <controls:XYSliders Height="Auto" Margin="0,-1,0,-8" XValue="{Binding MainFormModel.SliderX, Converter={StaticResource DoubleToDecimalConverter}, Mode=TwoWay}" YValue="{Binding MainFormModel.SliderY,Converter={StaticResource DoubleToDecimalConverter}, Mode=TwoWay}" Command="{Binding SliderXyChangedCommand}" XSliderLabel="{x:Static resx:GUI.MainForm_Sliders_XColorSpace}" YSliderLabel="{x:Static resx:GUI.MainForm_Sliders_YColorSpace}" OldXValue="{Binding MainFormModel.OldSliderX, Mode=OneWayToSource}" OldYValue="{Binding MainFormModel.OldSliderY, Mode=OneWayToSource}"/>
                    </Grid>
                </StackPanel>
                <xcad:DockingManager Grid.Row="1" Background="AliceBlue">
                    <xcad:LayoutRoot>
                        <xcad:LayoutPanel>
                            <xcad:LayoutAnchorablePane>
                                <xcad:LayoutAnchorable Title="Properties" CanClose="False" CanHide="False" CanAutoHide="False">
                                    <xctk:PropertyGrid x:Name="pgObject" ShowSummary="True" ShowTitle="False" ShowSortOptions="False" ShowSearchBox="False" SnapsToDevicePixels="True" SelectedObject="{Binding SelectedObject}" Margin="0,0,0,2" VerticalContentAlignment="Stretch" IsReadOnly="True"  />
                                </xcad:LayoutAnchorable>
                            </xcad:LayoutAnchorablePane>
                        </xcad:LayoutPanel>
                    </xcad:LayoutRoot>
                </xcad:DockingManager>
            </Grid>
        </Grid>

        <tb:TaskbarIcon x:Name="trayicon" Height="659" VerticalAlignment="Top" ToolTipText="WinHue 3" TrayMouseDoubleClick="trayicon_TrayMouseDoubleClick" Grid.RowSpan="2">
            <!--<tb:TaskbarIcon.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Lights" x:Name="mnuLights"/>
                        <MenuItem Header="Groups" x:Name="mnuGroups"/>
                        <MenuItem Header="Scenes" x:Name="mnuScenes"/>
                    </ContextMenu>
                </tb:TaskbarIcon.ContextMenu>-->
        </tb:TaskbarIcon>

    </Grid>

</Window>
