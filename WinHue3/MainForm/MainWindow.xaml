<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:resx="clr-namespace:WinHue3.Resources"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:xcad="http://schemas.xceed.com/wpf/xaml/avalondock"
        xmlns:mainForm="clr-namespace:WinHue3.MainForm"
        xmlns:converters="clr-namespace:WinHue3.Functions.Converters"
        xmlns:sliders="clr-namespace:WinHue3.MainForm.Sliders"
        xmlns:common="clr-namespace:WinHue3.Philips_Hue.HueObjects.Common"
        xmlns:behaviors="clr-namespace:WinHue3.Functions.Behaviors"
        xmlns:fluent="clr-namespace:Fluent;assembly=Fluent"
        xmlns:controls="clr-namespace:WinHue3.Controls"
        x:Class="WinHue3.MainForm.MainWindow"
    Title="{Binding Title}" Height="824.356" Width="1349.484" 
    WindowStartupLocation="CenterScreen" MinHeight="600" MinWidth="800" 
    Icon="/WinHue3;component/Resources/HueGroupOn-Large.png" Closing="Window_Closing"  
    ResizeMode="CanResizeWithGrip" x:Name="MainForm" BorderThickness="0" 
    behaviors:WindowContentRenderedBehavior.Command="{Binding InitializeCommand}" StateChanged="MainForm_StateChanged" Loaded="MainForm_Loaded"
    >

    <Window.Resources>
        <converters:DoubleToDecimalConverter x:Key="DoubleToDecimalConverter"/>
        <converters:DoubleToUShortConverter x:Key="SliderToUshortConverter"/>

        <Style TargetType="{x:Type TextBlock}" x:Key="TbWrap">
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="Width" Value="auto"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.MainFormModel.WrapText, ElementName=MainForm}" Value="True" >
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="Width" Value="75"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type TextBox}" x:Key="TbxWrap">
            <Setter Property="TextWrapping" Value="NoWrap"/>
            <Setter Property="Width" Value="auto"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="IsHitTestVisible" Value="False"/>
            <Setter Property="Background" Value="Transparent"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.MainFormModel.WrapText, ElementName=MainForm}" Value="True">
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="Width" Value="75"/>
                </DataTrigger>
            </Style.Triggers>

        </Style>

    </Window.Resources>

    <Window.DataContext>
        <mainForm:MainFormViewModel/>
    </Window.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="118" />
            <RowDefinition/>
            <RowDefinition Height="28"/>
        </Grid.RowDefinitions>
        <fluent:Ribbon x:Name="RbnMainRibbon" VerticalAlignment="Top" IsMinimized="False" DockPanel.Dock="Top" Grid.Row="0" Height="120" SelectedTabIndex="0" ScrollViewer.CanContentScroll="True" CanCustomizeQuickAccessToolBarItems="False" IsAutomaticCollapseEnabled="False" IsQuickAccessToolBarMenuDropDownVisible="False" IsQuickAccessToolBarVisible="False" ShowQuickAccessToolBarAboveRibbon="False" CanMinimize="False" Margin="0,0,-3,0" Grid.RowSpan="2">
            <fluent:Ribbon.Menu>
                <fluent:Backstage>
                    <fluent:BackstageTabControl>
                        <fluent:BackstageTabItem Header="Menu">
                            <Grid Margin="50">
                                <WrapPanel>
                                    <Image Height="64" Source="/WinHue3;component/Resources/HueGroupOn-Large.png"/>
                                    <TextBlock Text="WinHue 3" FontSize="64" FontWeight="Bold" Padding="10,0,0,0" />
                                </WrapPanel>
                                <TextBlock Text="{Binding Version}" FontWeight="Bold" FontSize="30" Margin="0,74,0,0"/>
                                <TextBlock Margin="0,114,0,0" Foreground="Black">
                                    <TextBlock.Text>
                                        by Pascal Pharand (Hyrules)
                                    </TextBlock.Text>
                                </TextBlock>
                                <TextBlock Margin="0,134,0,0" >
                                    <TextBlock.Text>
                                        Creative Commons Attribution Non-Commercial License V2.0.
                                    </TextBlock.Text>
                                </TextBlock>
                            </Grid>
                        </fluent:BackstageTabItem>
                        <fluent:BackstageTabItem Header="Help">
                            <Grid Margin="50">
                                <WrapPanel>
                                    <StackPanel Orientation="Vertical">
                                        <TextBlock Text="Help" FontFamily="Segoe UI Light" FontSize="48" Margin="0,0,0,10"/>
                                        <StackPanel Orientation="Horizontal" Margin="0,10">
                                            <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Help_Website}" LargeIcon="/WinHue3;component/Resources/WebSite.png" Command="{Binding OpenWinHueWebsiteCommand}" Style="{DynamicResource ButtonBackstageStyle}" Height="86" Width="84"/>
                                            <StackPanel Orientation="Vertical" Margin="15,0,0,0">
                                                <TextBlock FontFamily="Segoe UI Light" FontSize="22" Margin="0,0,0,5">Official Website</TextBlock>
                                                <TextBlock>Visit the WinHue website.</TextBlock>
                                            </StackPanel>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal" Margin="0,10">
                                            <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Help_Forum}" LargeIcon="/WinHue3;component/Resources/Help.png" Command="{Binding OpenWinHueSupportCommand}" Style="{DynamicResource ButtonBackstageStyle}" Width="86" Height="84"/>
                                            <StackPanel Orientation="Vertical" Margin="15,0,0,0">
                                                <TextBlock FontFamily="Segoe UI Light" FontSize="22" Margin="0,0,0,5">Request Help</TextBlock>
                                                <TextBlock>Submit bug reports, request features or ask a question on our GitHub issues forum.</TextBlock>
                                            </StackPanel>
                                        </StackPanel>

                                    </StackPanel>
                                </WrapPanel>

                            </Grid>
                        </fluent:BackstageTabItem>
                        <fluent:Button Header="{x:Static resx:GUI.MainForm_Menu_Settings}" Command="{Binding OpenSettingsWindowCommand}"/>
                        <fluent:Button Header="{x:Static resx:GUI.MainForm_Menu_BridgePairing}" Command="{Binding DoBridgePairingCommand}"/>
                        <fluent:Button Header="{x:Static resx:GUI.MainForm_Menu_FindLifx}" Command="{Binding FindLifxDevicesCommand}"/>
                        <fluent:Button Header="{x:Static resx:GUI.MainForm_Menu_VirtualBridge}" Command="{Binding LoadVirtualBridgeCommand}" Foreground="White">
                            <fluent:Button.Style>
                                <Style TargetType="fluent:Button" BasedOn="{StaticResource {x:Type fluent:Button}}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMasterDebugger}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </fluent:Button.Style>
                        </fluent:Button>
                        <fluent:SeparatorTabItem/>
                        <fluent:Button Header="{x:Static resx:GUI.MainForm_Menu_Quit}" Command="{Binding QuitApplicationCommand}"/>
                    </fluent:BackstageTabControl>
                </fluent:Backstage>
            </fluent:Ribbon.Menu>
            <fluent:RibbonTabItem Header="{x:Static resx:GUI.MainForm_Tab_Home}" HorizontalAlignment="Stretch" VerticalAlignment="Center" IsSelected="True" IsOpen="True" ReduceOrder="creators,search,settings,search,search,creators,settings,settings">
                <fluent:RibbonGroupBox Name="search" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Search}" Icon="/WinHue3;component/Resources/HueLightSearch.png">
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchLight}" LargeIcon="/WinHue3;component/Resources/HueLightSearch.png" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchLight}" Command="{Binding SearchNewLightsCommand}" SizeDefinition="Large,Large,Large"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Touchlink}" Command="{Binding TouchLinkCommand}" HorizontalAlignment="Left" Icon="/WinHue3;component/Resources/touchlink.png" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Touchlink}" SizeDefinition="Middle,Middle,Small"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_FindSerial}" Command="{Binding FindLightSerialCommand}" HorizontalAlignment="Left" Icon="/WinHue3;component/Resources/findserial.png" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_FindSerial}" SizeDefinition="Middle,Middle,Small"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchSensor}" Icon="/WinHue3;component/Resources/SensorSearch.png" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SearchSensor}" Command="{Binding SearchNewSensorsCommand}" SizeDefinition="Middle,Middle,Small"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Name="commands" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Commands}">
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllON}" Icon="/WinHue3;component/Resources/HueGroupOn-Large.png" LargeIcon="/WinHue3;component/Resources/HueGroupOn-Large.png" Command="{Binding AllOnCommand}" SizeDefinition="Large,Middle,Middle"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_CommandsAllOFF}" Icon="/WinHue3;component/Resources/HueGroupOff-Large.png" LargeIcon="/WinHue3;component/Resources/HueGroupOff-Large.png" Command="{Binding AllOffCommand}" IsManipulationEnabled="True" SizeDefinition="Large,Middle,Middle"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Name="refresh" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Refresh}" >
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_RefreshButton}"  LargeIcon="/WinHue3;component/Resources/refreshMetro5.ico" Command="{Binding RefreshViewCommand}" SizeDefinition="Large,Large,Large"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Name="creators" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators}">
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateGroup}" LargeIcon="/WinHue3;component/Resources/HueGroupOn-Large.png"  Command="{Binding CreateGroupCommand}" SizeDefinition="Large,Large,Large"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateScene}"  LargeIcon="/WinHue3;component/Resources/scenes.png"  Command="{Binding CreateSceneCommand}" SizeDefinition="Large,Large,Large"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSchedule}" LargeIcon="/WinHue3;component/Resources/SchedulesLarge.png"  Command="{Binding CreateScheduleCommand}" SizeDefinition="Large,Large,Large"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateRule}" LargeIcon="/WinHue3;component/Resources/rules.png"  Command="{Binding CreateRuleCommand}" SizeDefinition="Large,Large,Large"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateSensor}" LargeIcon="/WinHue3;component/Resources/sensor.png"  Command="{Binding CreateSensorCommand}" SizeDefinition="Large,Large,Large"/>
                    <!--<RibbonButton x:Name="btnCreateAnimation" Label="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateAnimation}" IsEnabled="{Binding EnableControls, FallbackValue=false}" Command="{Binding CreateAnimationCommand}" LargeImageSource="Resources/animation.png"/>-->
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_CreateHotkey}" Command="{Binding CreateHotKeyCommand}" Icon="/WinHue3;component/Resources/hotkeys.png" LargeIcon="/WinHue3;component/Resources/hotkeys.png" SizeDefinition="Large,Middle,Small"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_ResourceLink}"  Command="{Binding CreateResourceLinkCommand}" Icon="/WinHue3;component/Resources/resource.png" LargeIcon="/WinHue3;component/Resources/resource.png" SizeDefinition="Large,Middle,Small"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Creators_AdvancedCreator}"  Command="{Binding CreateAdvancedCommand}" Icon="/WinHue3;component/Resources/advanced.png" LargeIcon="/WinHue3;component/Resources/advanced.png" SizeDefinition="Large,Middle,Small"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Name="settings" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Settings}" Icon="/WinHue3;component/Resources/settings.png">
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsButton}" LargeIcon="/WinHue3;component/Resources/settingsMetro.ico" Command="{Binding ChangeBridgeSettingsCommand}" SizeDefinition="Large,Large,Large"/>
                    <fluent:SplitButton Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton_CheckForUpdate}" Icon="/WinHue3;component/Resources/UpdateSearch.png" LargeIcon="/WinHue3;component/Resources/UpdateSearch.png" Command="{Binding CheckForUpdateCommand}" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton_CheckForUpdate}" SizeDefinition="Large,Middle,Small">
                        <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUpdateButton}" Icon="/WinHue3;component/Resources/update.png" Command="{Binding UpdateBridgeCommand}"/>
                    </fluent:SplitButton>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUsers}" Icon="/WinHue3;component/Resources/user.png" LargeIcon="/WinHue3;component/Resources/user.png" Command="{Binding ManageUsersCommand}" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsUsers}" SizeDefinition="Large,Middle,Small"/>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsResetTT}" Icon="/WinHue3;component/Resources/resettt.png" LargeIcon="/WinHue3;component/Resources/resettt.png" Command="{Binding ResetTransitionTimeCommand}" ToolTip="{x:Static resx:GUI.MainForm_Tab_Home_Group_SettingsResetTT}" SizeDefinition="Large,Middle,Small"/>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox Name="events" Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_Events}">
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Home_Group_EventsLogButton}" LargeIcon="/WinHue3;component/Resources/eventlog.png"  Command="{Binding ShowEventLogCommand}" SizeDefinition="Large,Large,Large" KeyTip="E"/>
                </fluent:RibbonGroupBox>

            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="{x:Static resx:GUI.MainForm_Tab_Tools}">
                <fluent:RibbonGroupBox Header="Tools" Width="auto">
                    <fluent:SplitButton Header="{x:Static resx:GUI.MainForm_ToolsTab_CpuTempMon}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Command="{Binding CpuTempMonCommand}"  LargeIcon="/WinHue3;component/Resources/cputemp.png" ToolTip="{x:Static resx:GUI.MainForm_ToolsTab_CpuTempMon_Tooltip}" >
                        <fluent:Button Header="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding CpuTempMonSettingsCommand}"/>
                    </fluent:SplitButton>
                    <!--<RibbonSplitButton Label="{x:Static resx:GUI.MainForm_ToolsTab_RssFeed}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"  Command="{Binding RssFeedMonCommand}" LargeImageSource="Resources/rss.png" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding RssFeedMonSettingsCommand}"/>
                    </RibbonSplitButton>-->
                    <!--<RibbonSplitButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Clapper}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Command="{Binding ClapperCommand}"  LargeImageSource="Resources/rss.png" IsEnabled="False" >
                        <RibbonButton Label="{x:Static resx:GUI.MainForm_ToolsTab_Settings}" Command="{Binding RssFeedMonSettingsCommand}"/>
                    </RibbonSplitButton>-->
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox x:Name="RgViews" Header="Views" Width="auto">
                    <fluent:Button x:Name="BtnScenesMapping" Header="{x:Static resx:GUI.MainForm_Tab_View_SceneMapping}" Command="{Binding ViewSceneMappingCommand}" LargeIcon="/WinHue3;component/Resources/SceneMapping.png"/>
                    <fluent:Button x:Name="BtnBulbView" Header="{x:Static resx:GUI.MainForm_Tab_View_BulbsView}" Command="{Binding ViewBulbsCommand}" LargeIcon="/WinHue3;component/Resources/BulbView.png" />
                    <fluent:Button x:Name="BtnGroupView" Header="{x:Static resx:GUI.MainForm_Tab_View_GroupsView}" Command="{Binding ViewGroupsCommand}" LargeIcon="/WinHue3;component/Resources/GroupView.png"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="{x:Static resx:GUI.MainForm_Tab_View}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <fluent:RibbonGroupBox x:Name="RgViewSort" Width="auto" Header="{x:Static resx:GUI.MainForm_Tab_View_Sorting}">
                    <fluent:ComboBox x:Name="RbcSorting" Header="Sort" IsEditable="False" SelectedValue="{Binding MainFormModel.Sort}" SelectedValuePath="Tag" behaviors:CommandBehavior.RoutedEventName="SelectionChanged" behaviors:CommandBehavior.Command="{Binding SortListViewCommand}">
                        <ComboBoxItem Content="Defaut" Tag="{x:Static mainForm:WinHueSortOrder.Default}"/>
                        <ComboBoxItem Content="Ascending" Tag="{x:Static mainForm:WinHueSortOrder.Ascending}"/>
                        <ComboBoxItem Content="Descending" Tag="{x:Static mainForm:WinHueSortOrder.Descending}"/>
                    </fluent:ComboBox>
                </fluent:RibbonGroupBox>
                <fluent:RibbonGroupBox>
                    <fluent:Button x:Name="PropertGrid" Command="{Binding ShowPropertyGridCommand}" LargeIcon="/WinHue3;component/Resources/propertygrid.png" Header="{x:Static resx:GUI.MainForm_Tab_View_PropertyGrid}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
            <fluent:RibbonTabItem Header="{x:Static resx:GUI.MainForm_Tab_Help}" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                <fluent:RibbonGroupBox>
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Help_Website}" x:Name="BtnWebsite" LargeIcon="/WinHue3;component/Resources/WebSite.png" Command="{Binding OpenWinHueWebsiteCommand}" />
                    <fluent:Button Header="{x:Static resx:GUI.MainForm_Tab_Help_Forum}" x:Name="BtnSupportForum" LargeIcon="/WinHue3;component/Resources/Help.png" Command="{Binding OpenWinHueSupportCommand}"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
        </fluent:Ribbon>
        <StatusBar x:Name="SbStatusBar" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="2" Margin="0,0.667,-0.333,0.333">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="350"/>
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Column="1" HorizontalContentAlignment="Stretch" BorderThickness="1" Margin="1" BorderBrush="{x:Null}" >
                <TextBlock  x:Name="LblSbMessage" Text="{Binding Lastmessage}" HorizontalAlignment="Stretch"/>
            </StatusBarItem>
            <StatusBarItem Grid.Column="2" BorderThickness="1" Margin="0" BorderBrush="{x:Null}" Padding="1">
                <Grid Height="22" Width="345">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="3"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="3"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Border Width="19" Height="19" Grid.Column="0" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_HotKey}" CornerRadius="10">
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="Red"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding HotkeyDetected}" Value="True">
                                        <Setter Property="Background" Value="Green"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>

                    <Image Width="19" Height="19" Grid.Column="2" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_Search}">
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Setter Property="Source" Value="{x:Null}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SearchingLights}" Value="True">
                                        <Setter Property="Source" Value="/WinHue3;component/Resources/magnifier.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <Image Width="19" Height="19" Grid.Column="4" ToolTip="{x:Static resx:GUI.MainForm_StatusBar_ToolTip_UpdateAvailable}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="PreviewMouseUp">
                                <i:InvokeCommandAction Command="{Binding DoAppUpdateCommand}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <Image.Style>
                            <Style TargetType="{x:Type Image}">
                                <Setter Property="Source" Value="{x:Null}" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding AppUpdateAvailable}" Value="True">
                                        <Setter Property="Source" Value="/WinHue3;component/Resources/UpdateSearch.png"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <controls:CommandComboBox Grid.Column="5" x:Name="CbListBridge" ItemsSource="{Binding ListBridges}" DisplayMemberPath="LongName" SelectedItem="{Binding SelectedBridge}" HorizontalAlignment="Right"  VerticalAlignment="Top" Width="200" Height="22" BorderThickness="0" Padding="0" Command="{Binding ChangeBridgeCommand}">
                        <controls:CommandComboBox.Style>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MultiBridgeCB}" Value="False">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </controls:CommandComboBox.Style>
                    </controls:CommandComboBox>
                </Grid>
            </StatusBarItem>
        </StatusBar>
        <Grid Grid.Row="1" Margin="0,2,-0.333,0.333">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="350"/>
            </Grid.ColumnDefinitions>

            <ListView x:Name="LvMainObjects" HorizontalAlignment="Stretch" 
                      ItemsSource="{Binding ListBridgeObjects, NotifyOnSourceUpdated=True}"  
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                      SelectedItem="{Binding SelectedObject}" 
                      ContextMenuOpening="lvMainObjects_ContextMenuOpening" 
                      SelectionChanged="lvMainObjects_SelectionChanged" 
                      SelectionMode="Single" 
                      VerticalContentAlignment="Stretch" Grid.Column="0" 
                      IsEnabled="{Binding EnableListView}" BorderThickness="0" 
                      behaviors:OnClickBehavior.Command="{Binding ClickObjectCommand}" 
                      behaviors:OnClickBehavior.IgnoreClick_CanExecute="true"
                      behaviors:OnDoubleClickBehavior.Command="{Binding DoubleClickObjectCommand}" 
                      behaviors:OnDoubleClickBehavior.IgnoreDblClick_CanExecute="True"
                      behaviors:KeyUpBehavior.Command="{Binding DeleteObjectCommand}">
                      
                <ListView.Resources>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="Control.MouseDoubleClick">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(SolidColorBrush.Color)" To="Red" Duration="0:0:.3" AutoReverse="True"/>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:.3" AutoReverse="True"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                </ListView.Resources>
                <ListView.ContextMenu>
                    <ContextMenu x:Name="CmListView" IsTabStop="True">
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim}">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_10}" Command="{Binding ToggleDim10Command}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_25}" Command="{Binding ToggleDim25Command}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_50}" Command="{Binding ToggleDim50Command}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ToggleDim_75}" Command="{Binding ToggleDim75Command}"/>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Identify}" x:Name="MnuIdentify">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_None}" x:Name="MnuIdentifyStop" Command="{Binding IdentifyStopCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Long}" x:Name="MnuIdentifyLong" Command="{Binding IdentifyLongCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Short}" x:Name="MnuIdentifyShort" Command="{Binding IdentifyShortCommand}"/>
                        </MenuItem>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Effects}">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Colorloop}" x:Name="MnuColorloop" Command="{Binding ColorloopCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_None}" x:Name="MnuEffectNone" Command="{Binding NoEffectCommand}"/>
                        </MenuItem>
                        <!--<MenuItem Header="Strobe" Command="{Binding StrobeCommand}"/>-->
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity}" x:Name="MnuSensitivity">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_High}" x:Name="MnuSensivityHigh" Command="{Binding SensitivityHighCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_Medium}" x:Name="MnuSensivityMed" Command="{Binding SensitivityMediumCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Sensitivity_Low}" x:Name="MnuSensivityLow" Command="{Binding SensitivityLowCommand}"/>
                        </MenuItem>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Clone}" x:Name="MnuCloning">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_QuickClone}" x:Name="MnuQuickClone" Command="{Binding QuickCloneCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Clone}" x:Name="MnuClone" Command="{Binding CloneCommand}"/>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_Copy}">
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJsonRaw}" x:Name="MnuCopyToJsonRaw" Command="{Binding CopyToJsonRawCommand}"/>
                            <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_CopyToJson}" x:Name="MnuCopyToJson" Command="{Binding CopyToJsonCommand}"/>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="{x:Static resx:GUI.MainForm_ListView_Context_ReplaceLightsState}" x:Name="MnuReplaceState" Command="{Binding ReplaceCurrentStateCommand}" />
                    </ContextMenu>
                </ListView.ContextMenu>
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <!-- TODO: VALIDATE FUNCTIONNING -->
                        <WrapPanel Orientation="Horizontal" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="5,5,5,5">
                            <WrapPanel.Style>
                                <Style TargetType="WrapPanel">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding visible}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </WrapPanel.Style>
                        </WrapPanel>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
                <ListView.ItemContainerStyle>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding visible}" Value="False">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemTemplate>
                    <DataTemplate DataType="common:IHueObject">
                        <WrapPanel Orientation="Vertical" Margin="5,5,5,5" SnapsToDevicePixels="True" VerticalAlignment="Top" HorizontalAlignment="Center">
                            <Image Height="48" Width="48" Source="{Binding Image}" SnapsToDevicePixels="True" RenderOptions.EdgeMode="Aliased" RenderOptions.BitmapScalingMode="HighQuality"/>
                            <TextBox Text="{Binding name}" Style="{StaticResource TbxWrap}" HorizontalAlignment="Center" TextAlignment="Center" FontWeight="Bold" IsReadOnly="True"/>
                            <!--<TextBlock x:Name="tblName" Text="{Binding name}" Style="{StaticResource tbWrap}" HorizontalAlignment="Center" TextAlignment="Center" FontWeight="Bold"/>-->
                            <TextBlock  x:Name="tblShowId" Text="{Binding Id}" TextAlignment="Center" FontStyle="Italic">
                                <TextBlock.Style>
                                    <Style BasedOn="{StaticResource TbWrap}" TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding DataContext.MainFormModel.ShowId, ElementName=MainForm}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </WrapPanel>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <ListView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Expander IsExpanded="True"   >
                                                <Expander.Header >
                                                    <Grid Width="Auto" HorizontalAlignment="{Binding HorizontalAlignment, Mode=OneWayToSource, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ContentPresenter}}}" Background="{StaticResource HeaderBackgroundBrush}">
                                                        <!--<Grid.Background>
                                                            <LinearGradientBrush>
                                                                <GradientStop Color="White" />
                                                                <GradientStop Color="Gray" Offset="1"/>
                                                            </LinearGradientBrush>
                                                        </Grid.Background>-->
                                                        <TextBlock Text="{Binding Name}" FontWeight="Bold" FontSize="14" FontStyle="Italic" Foreground="White" Padding="3"/>
                                                    </Grid>
                                                </Expander.Header>
                                                <ItemsPresenter />
                                            </Expander>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </ListView.GroupStyle>
            </ListView>
            <TextBlock Text="{x:Static resx:GUI.BridgeUpdateRequired}" FontSize="40" Margin="5,181,9.667,0"  Height="198" VerticalAlignment="Top" TextWrapping="Wrap" HorizontalAlignment="Center" Foreground="#FF7D7D7D" Grid.Column="0">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding EnableListView}" Value="False">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" MinHeight="472"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Column="0" HorizontalAlignment="Stretch" Height="462" VerticalAlignment="Top" Margin="0">
                    <Grid Height="65px">
                        <Label Content="Controls" HorizontalAlignment="Center" Width="350" Height="25" VerticalAlignment="Top" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlHue}" Background="{StaticResource HeaderBackgroundBrush}" Foreground="White"/>
                        <ToggleButton Margin="10,30,320,7" Style="{StaticResource AnimatedSwitch}" behaviors:OnClickBehavior.Command="{Binding DoubleClickObjectCommand}" ToolTip="On/Off"/>
                        <Button HorizontalAlignment="Left" Margin="315,30,0,0" VerticalAlignment="Top" Width="25" Padding="0" Height="25" ToolTip="Delete" BorderBrush="{x:Null}" Background="{x:Null}" Command="{Binding DeleteObjectCommand}" BorderThickness="0">
                            <Image Source="/WinHue3;component/Resources/close_delete.png" />
                        </Button>
                        <Button HorizontalAlignment="Left" Margin="52,30,0,0" VerticalAlignment="Top" Width="25" Height="25" BorderBrush="{x:Null}" Background="Transparent" ToolTip="Edit" Padding="0" Command="{Binding EditObjectCommand}" BorderThickness="0">
                            <Image Source="/WinHue3;component/Resources/edit.png"/>
                        </Button>
                        <Button HorizontalAlignment="Left" Margin="82,30,0,0" VerticalAlignment="Top" Width="25" Height="25" Background="{x:Null}" BorderBrush="Transparent" Padding="0" ToolTip="Rename" Command="{Binding RenameObjectCommand}" BorderThickness="0">
                            <Image Source="/WinHue3;component/Resources/rename.png"/>
                        </Button>
                    </Grid>
                    <Separator></Separator>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_HueColor}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlHue}" />
                    <sliders:BindableHueSlider  x:Name="SlHue" Height="22" VerticalAlignment="Top" Margin="10,0,10,10" Width="Auto" Value="{Binding MainFormModel.SliderHue}" IsSnapToTickEnabled="True" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlHue}" IsMoveToPointEnabled="True" Command="{Binding SliderHueChangedCommand}" Minimum="-1" Maximum="65535" OldValue="{Binding MainFormModel.OldSliderHue, Mode=OneWayToSource}">
                        <sliders:BindableHueSlider.Background>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1.0,0.5" >
                                <GradientStop Color="#FFFF0000" />
                                <GradientStop Color="#FEFFFF00" Offset="0.195" />
                                <GradientStop Color="#FE00FF00" Offset="0.389" />
                                <GradientStop Color="#FE00FFFF" Offset="0.5"   />
                                <GradientStop Color="#FE0000FF" Offset="0.715" />
                                <GradientStop Color="#FEFF00FF" Offset="0.856" />
                                <GradientStop Color="#FFFF0000" Offset="1.0"   />
                            </LinearGradientBrush>
                        </sliders:BindableHueSlider.Background>
                    </sliders:BindableHueSlider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_Brightness}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlBri}"/>
                    <sliders:BindableSlider x:Name="SlBri" Height="22" VerticalAlignment="Top" Maximum="255" Minimum="0" Margin="10,0,10,10" Width="Auto" IsSnapToTickEnabled="True" Value="{Binding MainFormModel.SliderBri}"  SmallChange="1" AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlBri}" IsMoveToPointEnabled="True" Command="{Binding SliderBriChangedCommand}" OldValue="{Binding MainFormModel.OldSliderBri, Mode=OneWayToSource}" Style="{StaticResource {x:Type Slider}}">
                        <sliders:BindableSlider.Background>
                            <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                <GradientStop Color="White" Offset="1"/>
                                <GradientStop Color="Black" Offset="0"/>
                            </LinearGradientBrush>
                        </sliders:BindableSlider.Background>
                    </sliders:BindableSlider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_Saturation}" HorizontalAlignment="Center" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlSat}"/>
                    <sliders:BindableSlider x:Name="SlSat" Height="22" VerticalAlignment="Top" Maximum="255" Minimum="0" Margin="10,0,10,10" IsSnapToTickEnabled="True" SmallChange="1" Value="{Binding MainFormModel.SliderSat}"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlSat}" IsMoveToPointEnabled="True" Command="{Binding SliderSatChangedCommand}" OldValue="{Binding MainFormModel.OldSliderSat, Mode=OneWayToSource}" Style="{StaticResource {x:Type Slider}}">
                        <sliders:BindableSlider.Background>
                            <LinearGradientBrush>
                                <GradientStop Color="White" x:Name="SlSatStartGradient"/>
                                <GradientStop Color="{Binding Hue, ElementName=SlHue}" Offset="1" x:Name="SlSatEndGradient"/>
                            </LinearGradientBrush>
                        </sliders:BindableSlider.Background>
                    </sliders:BindableSlider>
                    <Label Content="{x:Static resx:GUI.MainForm_Sliders_ColorTemp}" HorizontalAlignment="Center"  Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlCt}"/>
                    <sliders:BindableSlider x:Name="SlCt" Height="22" VerticalAlignment="Top" Maximum="500" Margin="10,0,10,10" Width="Auto" Minimum="153" IsSnapToTickEnabled="True" Value="{Binding MainFormModel.SliderCt}"  SmallChange="1"  AutoToolTipPlacement="TopLeft" ToolTip="{Binding Value, ElementName=SlCt}" IsMoveToPointEnabled="True" Command="{Binding SliderCtChangedCommand}" OldValue="{Binding MainFormModel.OldSliderCt, Mode=OneWayToSource}" Style="{StaticResource {x:Type Slider}}">
                        <sliders:BindableSlider.Background>
                            <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                                <GradientStop Color="#FFFF8912" Offset="0"/>
                                <GradientStop Color="#FFFFF9FD" Offset="1"/>
                            </LinearGradientBrush>
                        </sliders:BindableSlider.Background>
                    </sliders:BindableSlider>
                    <Grid Height="100">
                        <Separator Margin="0,-1,0,93"/>
                        <Separator Margin="0,104,0,-12"/>
                        <Label x:Name="LblTt" Content="{Binding TransitionTimeTooltip, Mode=OneWay}" HorizontalAlignment="Center" Margin="0,112,0,-38" Width="350" HorizontalContentAlignment="Center" IsEnabled="{Binding IsEnabled, ElementName=SlTt}"/>
                        <sliders:BindableSlider x:Name="SlTt" Maximum="65535" Minimum="-1" Margin="9,143,11,-65" IsSnapToTickEnabled="True" SmallChange="1" SnapsToDevicePixels="True" Value="{Binding SliderTt, Converter={StaticResource SliderToUshortConverter}, FallbackValue=-1}" IsMoveToPointEnabled="True" IsEnabled="{Binding IsEnabled, ElementName=SlHue}" Style="{StaticResource {x:Type Slider}}" />
                        <sliders:XYSliders Height="Auto" Margin="0,-1,0,-8" XValue="{Binding MainFormModel.SliderX, Converter={StaticResource DoubleToDecimalConverter}, Mode=TwoWay}" YValue="{Binding MainFormModel.SliderY, Converter={StaticResource DoubleToDecimalConverter}, Mode=TwoWay}" Command="{Binding SliderXyChangedCommand}" XSliderLabel="{x:Static resx:GUI.MainForm_Sliders_XColorSpace}" YSliderLabel="{x:Static resx:GUI.MainForm_Sliders_YColorSpace}" OldXValue="{Binding MainFormModel.OldSliderX, Mode=OneWayToSource}" OldYValue="{Binding MainFormModel.OldSliderY, Mode=OneWayToSource}"/>
                    </Grid>

                </StackPanel>
            </Grid>
        </Grid>

        <tb:TaskbarIcon x:Name="Trayicon" Height="659" VerticalAlignment="Top" ToolTipText="WinHue 3" TrayMouseDoubleClick="trayicon_TrayMouseDoubleClick" Margin="0,0,-0.333,0" Grid.RowSpan="2" >
            <!--<tb:TaskbarIcon.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Lights" x:Name="mnuLights"/>
                        <MenuItem Header="Groups" x:Name="mnuGroups"/>
                        <MenuItem Header="Scenes" x:Name="mnuScenes"/>
                    </ContextMenu>
                </tb:TaskbarIcon.ContextMenu>-->
        </tb:TaskbarIcon>

    </Grid>

</Window>